dnl Process this file with autoconf to produce a configure script.

# requires autoconf
AC_PREREQ(2.52)

# init autoconf
AC_INIT(src/intrface.c)

# Set library version number (API)
MAJOR_VERSION=4
MINOR_VERSION=5
MICRO_VERSION=1
VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(VERSION)

AC_ARG_ENABLE(glib2, [  --disable-glib2        use GLib 1.2 instead of 2.0 [default=no]],,disable_glib2=no)

# libtool versioning
if test "x$disable_glib2" = "xno"; then
    ABI_VERSION=0
else
    ABI_VERSION=4
fi
LT_RELEASE=$ABI_VERSION.$MINOR_VERSION
LT_CURRENT=`expr $MINOR_VERSION + $ABI_VERSION`
LT_REVISION=$MICRO_VERSION
LT_AGE=$MINOR_VERSION
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

PACKAGE=libticalcs
AC_SUBST(PACKAGE)

# specify a config file
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_MAINTAINER_MODE

AM_CONFIG_HEADER(config.h)

# Run test in a subshell; some versions of sh will print an error if
# an executable is not found, even if stderr is redirected.
# Redirect stdin to placate older versions of autoconf.  Sigh.
if (aclocal --print-ac-dir) </dev/null >/dev/null 2>&1 && test -w `aclocal --print-ac-dir`; then
    ACLOCALDIR=`aclocal --print-ac-dir`
    AC_SUBST(ACLOCALDIR)
fi
AM_CONDITIONAL(Aclocal, test x$ACLOCALDIR != x )

# determine the system type
dnl AC_CANONICAL_SYSTEM
# determine the host type
AC_CANONICAL_HOST

# change the default prefix (/usr/local) to /usr
AC_PREFIX_DEFAULT('/usr')

# build time sanity check...
AM_SANITY_CHECK

# checks for programs.
dnl AC_ARG_PROGRAM
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_LN_S
AC_ISC_POSIX
AC_PROG_GCC_TRADITIONAL
AC_PROG_AWK

# manage different versions of GLib for backward compatibility

AC_MSG_CHECKING(whether using GLib2)
if test "x$disable_glib2" = "xno"; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi
AM_CONDITIONAL(LIBGLIB2, test "$disable_glib2" = "no")

# find pkg-config
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test x$PKG_CONFIG = xno ; then
  AC_MSG_ERROR([*** pkg-config not found. See http://www.freedesktop.org/software/pkgconfig/])
fi

# check for ticables presence
PKG_CHECK_MODULES(TICABLES, ticables >= 3.6.1)
AC_SUBST(TICABLES_CFLAGS)
AC_SUBST(TICABLES_LIBS)

# check for tifiles presence
PKG_CHECK_MODULES(TIFILES, tifiles >= 0.5.3)
AC_SUBST(TIFILES_CFLAGS)
AC_SUBST(TIFILES_LIBS)

# check for glib presence
if test "x$disable_glib2" = "xno"; then
  PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.0.0)
  AC_SUBST(GLIB_CFLAGS)
  AC_SUBST(GLIB_LIBS)
else
  PKG_CHECK_MODULES(GLIB, glib >= 1.2.0)
  AC_SUBST(GLIB_CFLAGS)
  AC_SUBST(GLIB_LIBS)
fi

CFLAGS="$CFLAGS $TICABLES_CFLAGS $TIFILES_CFLAGS $GLIB_CFLAGS"
LDFLAGS="$LDFLAGS $TICABLES_LIBS $TIFILES_LIBS $GLIB_LIBS"

# checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(stdlib.h string.h unistd.h time.h alloca.h errno.h fcntl.h libintl.h locale.h)

# checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_UID_T
AC_TYPE_MODE_T

# checks for library functions.
AC_FUNC_VPRINTF
AC_FUNC_MALLOC
AC_CHECK_FUNCS(strstr strtol strrchr strdup strcasecmp memchr memmove memset getwd)

# BSD stuffs
AC_MSG_CHECKING([for BSD])
case "$host" in
  *-*-*bsd*)    ticalcs_native_bsd=yes ;;
  *)            ticalcs_native_bsd=no  ;;
esac
AC_MSG_RESULT([$ticalcs_native_bsd])
AM_CONDITIONAL(OS_BSD, test "$ticalcs_native_bsd" = "yes")

# Win32 stuffs
AC_MSG_CHECKING([for Win32])
case "$host" in
  *-*-mingw*)   ticalcs_native_win32=yes ;;
  *-*-cygwin)   ticalcs_native_win32=yes ;;
  *)            ticalcs_native_win32=no  ;;
esac
AC_MSG_RESULT([$ticalcs_native_win32])
AM_CONDITIONAL(OS_WIN32, test "$ticalcs_native_win32" = "yes")

# Ensure MSVC-compatible struct packing convention is used when
# compiling for Win32 with gcc.
# What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
# gcc2 uses "-fnative-struct".
if test x"$ticalcs_native_win32" = xyes; then
  if test x"$GCC" = xyes; then
    msnative_struct=''
    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
    if test -z "$ac_cv_prog_CC"; then
      our_gcc="$CC"
    else
      our_gcc="$ac_cv_prog_CC"
    fi
    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
      2.)
        if $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then
          msnative_struct='-fnative-struct'
        fi
        ;;
      *)
        if $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then
          msnative_struct='-mms-bitfields'
        fi
        ;;
    esac
    if test x"$msnative_struct" = x ; then
      AC_MSG_RESULT([no way])
      AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])
    else
      CFLAGS="$CFLAGS $msnative_struct"
      AC_MSG_RESULT([${msnative_struct}])
    fi
  fi
fi

AC_CYGWIN32
AC_MINGW32
AC_EXEEXT

case $host in
  *-*-mingw*) ARCH="-D__WIN32__ -D__MINGW32__ -Os -s" ;;
  *-*-cygwin) ARCH="-D__WIN32__ -D__CYGWIN__ -mno-cygwin" ;;
  *-*-*bsd*)  ARCH="-D__BSD__" ;;
  *)          ARCH="-D__LINUX__" ;;
esac

# initialize libtool
AM_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_LIBTOOL

# gettext support
ALL_LINGUAS="fr"
AM_GNU_GETTEXT

locale_dir='${prefix}/share/locale'
AC_SUBST(locale_dir)

# some extra flags
CFLAGS="$CFLAGS $ARCH -Wall -D_REENTRANT"
LDFLAGS="$LDFLAGS $INTLLIBS"

# pass flags
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

AC_OUTPUT([
Makefile 
docs/Makefile 
macros/Makefile 
man/Makefile
man/ticalcs-config.1 
src12/Makefile
src/Makefile
tests/Makefile 
win32/Makefile
intl/Makefile
po/Makefile.in
ticalcs-config
libticalcs.lsm 
libticalcs.spec
ticalcs.pc
ticalcs-4.pc
])

echo Now, you can type 'make' and 'make install'

echo ;
echo "Important note: TiLP v6.0 & TiEmu v1.x depends on GLib 1.2 but TiLP v6.5"; 
echo "depends on 2.0.";
echo "By default, the library is compiled against GLib 2.0 for TiLP v6.5.";
echo "TiLP v6.0 & TiEmu v1.x users will have to run './configure' with the";
echo "'--disable-glib2' command line flag.";
echo "This flag allows you to create 2 different builds of the library but";
echo "they have the _same_ version number (and thus, are compatible) !";

if test "x$disable_glib2" = "xno"; then
 echo ;
 echo "=> Compiled against GLib 2.0 for use with TiLP v6.5 (libticalcs-4.so).";
 echo ;
else
 echo ;
 echo "=> Compiled against GLib 1.2 for use with TiLP v6.0 (libticalcs.so).";
 echo ;
fi
